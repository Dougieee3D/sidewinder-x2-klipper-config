# =============================================================================
#                    Sidewinder X2 â€“ Klipper Config (with ADXL345)
# =============================================================================
# NOTE:
# - Replace MCU serials with your own from:  ls /dev/serial/by-id/
# - Everything below is functionally identical to your original; comments added.
# - Sections are grouped with headers for quicker navigation.
# =============================================================================


# ============================= Firmware / MCU ================================
[mcu]
# USB ID for the printer's mainboard (CHANGE to your actual value)
serial: /dev/serial/by-id/usb-Klipper_stm32f401xc_12345-if00
# Safe restart method
restart_method: command


# ============================== Printer Limits ===============================
[printer]
# Motion kinematics for Sidewinder X2
kinematics: cartesian

# Global motion limits (XY)
max_velocity: 400             # mm/s cap for XY moves (planner limit)
max_accel: 8000               # mm/s^2 acceleration limit
square_corner_velocity: 5.0   # junction deviation-like corner speed

# Z-axis motion limits
max_z_velocity: 5             # mm/s
max_z_accel: 250              # mm/s^2

# Motion planner smoothing
minimum_cruise_ratio: 0.5     # helps with constant-velocity moves


# ============================ Heaters / Extrusion ============================
[extruder]
# Step/dir/enable pins for the extruder motor
step_pin: PA7
dir_pin: PA6
enable_pin: !PC4

# Motion / gearing for extruder
microsteps: 16
rotation_distance: 7.1910     # mm of filament per one motor rev

# Hotend / filament geometry
nozzle_diameter: 0.400
filament_diameter: 1.750

# Heater & thermistor
heater_pin: PC9
sensor_type: EPCOS 100K B57560G104F
sensor_pin: PC0
min_temp: 0
max_temp: 400

# Pressure advance tuning
pressure_advance: 0.02
pressure_advance_smooth_time: 0.06

# Safety limits for extrusions
max_extrude_only_distance: 100.0
max_extrude_cross_section: 50.0

# PID tune values (keep as recorded)
control: pid
pid_kp: 41.745
pid_ki: 8.977
pid_kd: 48.529

[heater_bed]
# Bed heater + thermistor
heater_pin: PA8
sensor_type: EPCOS 100K B57560G104F
sensor_pin: PC1

# Bed PID values
control: pid
pid_kp: 45.986
pid_ki: 0.757
pid_kd: 698.409

# Temperature bounds
min_temp: 0
max_temp: 130

# Part-cooling fan (print fan)
[fan]
pin: PC8
off_below: 0.1                 # avoid stalling at ultra-low duty

# Hotend heatsink fan (auto on/off)
[heater_fan hotend_fan]
pin: PC7
heater: extruder
heater_temp: 50.0               # turns on when hotend >= 50C
off_below: 0.2

# Controller / electronics fan
[controller_fan stepper_fan]
pin: PC6
off_below: 0.3
idle_speed: 0.0

# Filament runout sensor using Z endstop pin
[filament_switch_sensor filament]
pause_on_runout: True           # triggers PAUSE macro
runout_gcode: M117 Filament runout    # optional status message
insert_gcode: M117 Filament insert    # optional status message
switch_pin: PA0                 # uses z-endstop pin


# =============================== Motion: XY ================================
[stepper_x]
# X motor driver pins
step_pin: !PB14
dir_pin: PB13
enable_pin: !PB15
microsteps: 16
rotation_distance: 40

# X endstop & travel
endstop_pin: !PA2
position_endstop: 0
position_max: 300

# X homing
homing_speed: 100

[stepper_y]
# Y motor driver pins
step_pin: PB10
dir_pin: PB2
enable_pin: !PB12
microsteps: 16
rotation_distance: 40

# Y endstop & travel
endstop_pin: !PA1
position_endstop: 0
position_max: 313

# Y homing
homing_speed: 125
second_homing_speed: 10


# ================================ Motion: Z ================================
[stepper_z]
# Z motor driver pins
step_pin: PB0
dir_pin: !PC5
enable_pin: !PB1
microsteps: 16
rotation_distance: 8

# Z uses probe for endstop
endstop_pin: probe:z_virtual_endstop
position_max: 400
position_min: -5

# Z homing
homing_speed: 25
second_homing_speed: 10


# ============================== Input Shaper ================================
[input_shaper]
# Recorded shapers/frequencies for resonance mitigation
shaper_type_x: mzv
shaper_freq_x: 43.8
shaper_type_y: 2hump_ei
shaper_freq_y: 39.2


# ============================= Probe / Bed Mesh =============================
[bltouch]
# BLTouch pins
sensor_pin: PC2
control_pin: PC3

# Probe offsets from nozzle
x_offset: 27.25
y_offset: -12.8
# z_offset: 1.624  # managed by SAVE_CONFIG (leave commented)

# Probe behavior
speed: 10
samples: 2
sample_retract_dist: 8
samples_result: average
samples_tolerance: 0.050
samples_tolerance_retries: 3
stow_on_each_sample: True
probe_with_touch_mode: True

[safe_z_home]
# Homes X/Y to center, then probes Z
home_xy_position: 150,150
speed: 100
z_hop: 10
z_hop_speed: 5
move_to_previous: False

[bed_mesh]
# Probing & meshing parameters
speed: 120
horizontal_move_z: 5
mesh_min: 30,20
mesh_max: 300,290
algorithm: bicubic
probe_count: 5,5
mesh_pps: 3,3

# Mesh fade (compensation gradually reduced)
fade_start: 1.0
fade_end: 10.0
fade_target: 0.0


# =========================== Lights / VSD / Status ==========================
[neopixel my_neopixel]
pin: PB7
color_order: GRB
initial_RED: 0.0
initial_GREEN: 0.0
initial_BLUE: 0.0

[virtual_sdcard]
path: /home/sonic/printer_data/gcodes

[display_status]
[pause_resume]
[exclude_object]

[idle_timeout]
timeout: 86400


# =============================================================================
#                                   MACROS
# =============================================================================

# ----------------------------- PRINT_START -----------------------------------
[gcode_macro PRINT_START]
description: "Prep only; no mesh load"
gcode:
  G90                 # absolute positioning
  G21                 # units in mm
  M83                 # relative extrusion
  LED_ON              # gentle LED on
  G28                 # home all axes
  # Intentionally no mesh load here


# ------------------------------ PRINT_END ------------------------------------
[gcode_macro PRINT_END]
gcode:
  M400                         # wait for buffer empty
  G92 E0                       # zero extruder
  G1 E-3.0 F500                # retract a bit
  G91                          # relative moves
  G1 Z15 F3000                 # lift Z
  G90                          # back to absolute
  G1 X50 Y{printer.configfile.config["stepper_y"]["position_max"]} F6000  # park front
  M104 S0                      # hotend off
  M140 S0                      # bed off
  M106 S0                      # part fan off
  M84                          # disable steppers
  TIMELAPSE_TAKE_FRAME
  TIMELAPSE_RENDER


# ----------------------------- PURGE LINE ------------------------------------
[gcode_macro _PURGE_LINE]
gcode:
  SAVE_GCODE_STATE NAME=Pre_Prime
  G90
  M83
  G92 E0
  G1 Z10 F3000
  G1 X10 Y10 F6000
  G1 Z0.24 F1200
  G1 X125 Y10 F1500 E35      # long prime move
  G1 X126 Y10 F1500
  G1 E-0.7 F1800             # slight de-string
  G1 Z6 F3000
  G1 X5 Y5 F6000
  G92 E0
  RESTORE_GCODE_STATE NAME=Pre_Prime MOVE=0


# --------------- AREA_MESH_CALIBRATE (rectangle inside bed_mesh) -------------
[gcode_macro AREA_MESH_CALIBRATE]
description: "Rectangle-only bed mesh within [bed_mesh] limits"
gcode:
  {% if 'AREA_START' in params and 'AREA_END' in params %}
    {% set bm = printer["configfile"].config["bed_mesh"] %}
    {% set minx = bm.mesh_min.split(",")[0]|float %}
    {% set miny = bm.mesh_min.split(",")[1]|float %}
    {% set maxx = bm.mesh_max.split(",")[0]|float %}
    {% set maxy = bm.mesh_max.split(",")[1]|float %}

    # Parse slicer-provided area corners
    {% set s = params.AREA_START.split(",") %}
    {% set e = params.AREA_END.split(",") %}
    {% set ax0 = s[0]|float %}{% set ay0 = s[1]|float %}
    {% set ax1 = e[0]|float %}{% set ay1 = e[1]|float %}

    # Pad rectangle slightly and clamp to bed_mesh window
    {% set pad = 2.0 %}
    {% set ax0 = [ax0 - pad, minx]|max %}
    {% set ay0 = [ay0 - pad, miny]|max %}
    {% set ax1 = [ax1 + pad, maxx]|min %}
    {% set ay1 = [ay1 + pad, maxy]|min %}

    # Scale probe_count based on area vs full bed
    {% set pc = bm.probe_count.split(",") %}
    {% set pcx_full = pc[0]|int %}{% set pcy_full = pc[1]|int %}
    {% set pcx = (pcx_full * (ax1-ax0)/(maxx-minx))|round(0)|int %}
    {% set pcy = (pcy_full * (ay1-ay0)/(maxy-miny))|round(0)|int %}
    {% set pcx = 3 if pcx < 3 else (pcx_full if pcx > pcx_full else pcx) %}
    {% set pcy = 3 if pcy < 3 else (pcy_full if pcy > pcy_full else pcy) %}

    {action_respond_info("AREA_MESH_CALIBRATE -> min=%.2f,%.2f  max=%.2f,%.2f  probes=%d,%d" %
      (ax0, ay0, ax1, ay1, pcx, pcy))}
    BED_MESH_CALIBRATE mesh_min={ax0},{ay0} mesh_max={ax1},{ay1} probe_count={pcx},{pcy} samples=2
  {% else %}
    {action_respond_info("AREA_MESH_CALIBRATE called without AREA_START/END")}
  {% endif %}


# ----------------------- ADAPTIVE_MESH_V2 (polygons) -------------------------
[gcode_macro ADAPTIVE_MESH_V2]
description: "Use slicer exclude_object polygons for area mesh; else full-bed mesh"
variable_fallback_fullbed: 1
gcode:
  {% set bm = printer["configfile"].config["bed_mesh"] %}
  {% set minx = bm.mesh_min.split(",")[0]|float %}
  {% set miny = bm.mesh_min.split(",")[1]|float %}
  {% set maxx = bm.mesh_max.split(",")[0]|float %}
  {% set maxy = bm.mesh_max.split(",")[1]|float %}
  {% set objs = printer.exclude_object.objects %}

  # Find overall bounding box of all object polygons (if any)
  {% set have_poly = 0 %}
  {% set raw_minx =  1e9 %}{% set raw_miny =  1e9 %}
  {% set raw_maxx = -1e9 %}{% set raw_maxy = -1e9 %}
  {% for o in objs %}
    {% if o.polygon and o.polygon|length > 0 %}
      {% for p in o.polygon %}
        {% set px = p[0]|float %}{% set py = p[1]|float %}
        {% set have_poly = 1 %}
        {% if px < raw_minx %}{% set raw_minx = px %}{% endif %}
        {% if py < raw_miny %}{% set raw_miny = py %}{% endif %}
        {% if px > raw_maxx %}{% set raw_maxx = px %}{% endif %}
        {% if py > raw_maxy %}{% set raw_maxy = py %}{% endif %}
      {% endfor %}
    {% endif %}
  {% endfor %}

  # No polygons -> either run full-bed mesh or skip (based on variable)
  {% if have_poly == 0 %}
    {% if printer["gcode_macro ADAPTIVE_MESH_V2"].fallback_fullbed|int == 1 %}
      {action_respond_info("[ADAPTIVE] No polygons found â€” running FULL-BED mesh.")}
      BED_MESH_CALIBRATE
    {% else %}
      {action_respond_info("[ADAPTIVE] No polygons found â€” skipping mesh (set fallback_fullbed=1 to force full-bed).")}
    {% endif %}
  {% else %}
    # Slicers may use center-origin coordinates; convert to bed-space if needed
    {% set bed_w = (printer.toolhead.axis_maximum.x - printer.toolhead.axis_minimum.x) %}
    {% set bed_h = (printer.toolhead.axis_maximum.y - printer.toolhead.axis_minimum.y) %}
    {% if raw_minx < 0 or raw_miny < 0 %}
      {% set raw_minx = raw_minx + bed_w/2.0 %}
      {% set raw_maxx = raw_maxx + bed_w/2.0 %}
      {% set raw_miny = raw_miny + bed_h/2.0 %}
      {% set raw_maxy = raw_maxy + bed_h/2.0 %}
      {action_respond_info("ADAPTIVE_MESH_V2: center-origin polygons detected â†’ shifted")}
    {% endif %}

    # Clamp to bed_mesh window
    {% set sx = [raw_minx, minx]|max %}
    {% set sy = [raw_miny, miny]|max %}
    {% set ex = [raw_maxx, maxx]|min %}
    {% set ey = [raw_maxy, maxy]|min %}

    # Ensure minimum area (ms) so probe_count doesn't collapse too small
    {% set ms = 25.0 %}
    {% if (ex - sx) < ms %}
      {% set cx = (sx + ex)/2.0 %}
      {% set sx = cx - (ms/2.0) %}
      {% set ex = cx + (ms/2.0) %}
      {% if sx < minx %}{% set sx = minx %}{% set ex = minx + ms %}{% endif %}
      {% if ex > maxx %}{% set ex = maxx %}{% set sx = maxx - ms %}{% endif %}
    {% endif %}
    {% if (ey - sy) < ms %}
      {% set cy = (sy + ey)/2.0 %}
      {% set sy = cy - (ms/2.0) %}
      {% set ey = cy + (ms/2.0) %}
      {% if sy < miny %}{% set sy = miny %}{% set ey = miny + ms %}{% endif %}
      {% if ey > maxy %}{% set ey = maxy %}{% set sy = maxy - ms %}{% endif %}
    {% endif %}

    {action_respond_info("ADAPTIVE V2 -> AREA_START=%.2f,%.2f  AREA_END=%.2f,%.2f" % (sx, sy, ex, ey))}
    AREA_MESH_CALIBRATE AREA_START={sx},{sy} AREA_END={ex},{ey}
  {% endif %}


# ------------------------------ QoL / Utility --------------------------------
[gcode_macro PAUSE]
description: Pause the actual running print
rename_existing: PAUSE_BASE
variable_extrude: 1.0          # amount to retract on pause
gcode:
  {% set E = printer["gcode_macro PAUSE"].extrude|float %}
  {% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}
  {% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}
  {% set max_z = printer.toolhead.axis_maximum.z|float %}
  {% set act_z = printer.toolhead.position.z|float %}
  {% set z_safe = 2.0 if act_z < (max_z - 2.0) else (max_z - act_z) %}

  PAUSE_BASE
  G91
  {% if printer.extruder.can_extrude|lower == 'true' %}
    G1 E-{E} F2100           # retract if hot enough
  {% else %}
    {action_respond_info("Extruder not hot enough")}
  {% endif %}

  {% if "xyz" in printer.toolhead.homed_axes %}
    G1 Z{z_safe} F900
    G90
    G1 X{x_park} Y{y_park} F6000
  {% else %}
    {action_respond_info("Printer not homed")}
  {% endif %}

[gcode_macro RESUME]
description: Resume the actual running print
rename_existing: RESUME_BASE
gcode:
  {% set E = printer["gcode_macro PAUSE"].extrude|float %}
  {% set get_params = ('VELOCITY=' + params.VELOCITY) if 'VELOCITY' in params|upper else "" %}
  {% if printer.extruder.can_extrude|lower == 'true' %}
    G91
    G1 E{E} F2100            # unretract if hot
  {% else %}
    {action_respond_info("Extruder not hot enough")}
  {% endif %}
  RESUME_BASE {get_params}

[gcode_macro CANCEL_PRINT]
description: Cancel the actual running print
rename_existing: CANCEL_PRINT_BASE
gcode:
  TURN_OFF_HEATERS
  {% if "xyz" in printer.toolhead.homed_axes %}
    G91
    G1 Z4.5 F300
    G90
  {% else %}
    {action_respond_info("Printer not homed")}
  {% endif %}
  G28 X Y
  {% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}
  G1 Y{y_park} F2000
  M84
  CANCEL_PRINT_BASE

[gcode_macro HEAT]
description: Heats extruder and moves to a safe spot
gcode:
  {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(200)|float %}
  {% set Z = params.Z|default(50)|float %}
  {% set X = params.X|default(110)|float %}
  {% set Y = params.Y|default(110)|float %}
  SET_HEATER_TEMPERATURE HEATER=extruder TARGET={EXTRUDER_TEMP}
  {% if printer.toolhead.homed_axes != "xyz" %} G28 {% endif %}
  G1 Z{Z} F500
  G1 X{X} Y{Y} F6000

[gcode_macro COOL]
description: Turns off all heaters
gcode: TURN_OFF_HEATERS

[gcode_macro PREHEAT_PLA]
description: Preheats extruder and bed for PLA
gcode:
  {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(150)|float %}
  {% set BED_TEMP = params.BED_TEMP|default(60)|float %}
  SET_HEATER_TEMPERATURE HEATER=extruder TARGET={EXTRUDER_TEMP}
  SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={BED_TEMP}

[gcode_macro BED_MESH]
description: Heats bed, creates a full-bed mesh, then saves
gcode:
  {% set BED_TEMP = params.BED_TEMP|default(60)|float %}
  SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={BED_TEMP}
  {% if printer.toolhead.homed_axes != "xyz" %} G28 {% endif %}
  M190 S{BED_TEMP}           # wait for bed
  BED_MESH_CLEAR
  BED_MESH_CALIBRATE
  TURN_OFF_HEATERS
  SAVE_CONFIG

[gcode_macro G29]
description: "Load saved mesh 'default' (no probing)"
gcode:
  BED_MESH_PROFILE LOAD=default
  {action_respond_info("G29: loaded mesh profile 'default'")}

[gcode_macro NOZZLE_MID]
description: Moves nozzle to bed center
gcode:
  {% set Z = params.Z|default(10)|float %}
  {% if printer.toolhead.homed_axes != "xyz" %} G28 {% endif %}
  G1 Z{Z} F500
  G1 X110 Y110 F6000

[gcode_macro HEAT_WAIT]
description: "Only wait for bed if >1Â°C; always heat/WAIT for nozzle"
gcode:
  {% set BED = params.BED|default(0)|float %}
  {% set EXTRUDER = params.EXTRUDER|default(0)|float %}

  # Bed (optional) â€” only if target > 1Â°C
  {% if BED > 1 %}
    M140 S{BED}
    M190 S{BED}
  {% else %}
    # Bed heat disabled / ignored
    # M140 S{BED}
    # M190 S{BED}
  {% endif %}

  # Nozzle â€” always heat and wait
  M104 S{EXTRUDER}
  M109 S{EXTRUDER}

# ----------------------- BRUSH: nozzle wipe routine --------------------------
[gcode_macro BRUSH]
description: Wipe nozzle across silicone brush and retract a bit
# Defaults (override at call time if needed)
variable_x_left: 10
variable_x_right: 70
variable_y: 313
variable_z: 3
variable_passes: 4
variable_step_y: 1
variable_feed_approach: 3000   # 50 mm/s
variable_feed_z: 600           # 10 mm/s
variable_feed_xy: 6000         # 100 mm/s
variable_feed_step_y: 1200     # 20 mm/s
variable_retract: 2.0
variable_retract_feed: 1800    # 30 mm/s
gcode:
  # Resolve parameters (use macro defaults unless overridden)
  {% set xl = params.X_LEFT|default(x_left)|float %}
  {% set xr = params.X_RIGHT|default(x_right)|float %}
  {% set yy = params.Y|default(y)|float %}
  {% set zz = params.Z|default(z)|float %}
  {% set passes = params.PASSES|default(passes)|int %}
  {% set stepy = params.STEP_Y|default(step_y)|float %}
  {% set f_app = params.FEED_APPROACH|default(feed_approach)|float %}
  {% set fz = params.FEED_Z|default(feed_z)|float %}
  {% set fxy = params.FEED_XY|default(feed_xy)|float %}
  {% set fstepy = params.FEED_STEP_Y|default(feed_step_y)|float %}
  {% set retract = params.RETRACT|default(retract)|float %}
  {% set fretract = params.RETRACT_FEED|default(retract_feed)|float %}

  # Home if needed
  {% if 'xyz' not in printer.toolhead.homed_axes %}
    G28
  {% endif %}

  SAVE_GCODE_STATE NAME=BRUSH_STATE
  G90
  G1 X{xr} Y{yy} F{f_app}
  G1 Z{zz} F{fz}

  # Initial X swipes
  {% for i in range(passes) %}
    G1 X{xl} F{fxy}
    G1 X{xr} F{fxy}
  {% endfor %}

  # Small Y nudge to a fresh pad area
  G1 Y{yy - stepy} F{fstepy}

  # Always at least one extra swipe (no Python max(); Jinja-safe)
  {% set extra = (passes // 2) if passes > 1 else 1 %}
  {% for i in range(extra) %}
    G1 X{xl} F{fxy}
    G1 X{xr} F{fxy}
  {% endfor %}

  # Clean retract (relative E -> then restore)
  M83
  G1 E-{retract} F{fretract}
  M82

  RESTORE_GCODE_STATE NAME=BRUSH_STATE


# ----------------------------- LED helpers -----------------------------------
[gcode_macro LED_ON]
gcode: SET_LED LED=my_neopixel GREEN=0.059 RED=0.059 BLUE=0.059

[gcode_macro LED_OFF]
gcode: SET_LED LED=my_neopixel RED=0 GREEN=0 BLUE=0


# ======================= ADXL / Resonance (includes) =========================
# Include external configs as needed (comment out if not present)
[include timelapse.cfg]
[include moonraker_obico_macros.cfg]
# [include sample-bigtreetech-adxl345-v2.0.cfg]


# =========================== Screws Tilt Adjust ===============================
[screws_tilt_adjust]
# Bed screw coordinates (for assisted leveling)
screw1: 22.75,62.8
screw1_name: front left
screw2: 222.75,62.8
screw2_name: front right
screw3: 222.75,262.8
screw3_name: back right
screw4: 22.75,262.8
screw4_name: back left
speed: 125
screw_thread: CW-M5

[bed_screws]
# Bed screw map for manual tune
screw1: 50,50
screw1_name: front left
screw2: 250,50
screw2_name: front right
screw3: 250,250
screw3_name: back right
screw4: 50,250
screw4_name: back left
speed: 125


# ============================== SAVE_CONFIG ==================================
# * Do not edit below; auto-managed by Klipper after SAVE_CONFIG
# * Keeps z_offset, mesh, and other calibration artifacts

#*# <---------------------- SAVE_CONFIG ---------------------->
#*# DO NOT EDIT THIS BLOCK OR BELOW. The contents are auto-generated.
#*#
#*# [bltouch]
#*# z_offset = 1.556
#*#
#*# [input_shaper]
#*#
#*# [extruder]
#*#
#*# [heater_bed]
#*#
#*# [bed_mesh default]
#*# version = 1
#*# points =
#*# 	  0.051250, 0.058750, 0.055000, 0.025000
#*# 	  0.045000, 0.041250, 0.041250, 0.041250
#*# 	  0.042500, 0.050000, 0.043750, 0.036250
#*# 	  0.052500, 0.053750, 0.047500, 0.042500
#*# x_count = 4
#*# y_count = 4
#*# mesh_x_pps = 3
#*# mesh_y_pps = 3
#*# algo = bicubic
#*# tension = 0.2
#*# min_x = 135.938
#*# max_x = 174.03799999999998
#*# min_y = 133.568
#*# max_y = 176.40800000000002
